[{"content":"Okay, so remember how I mentioned diving into cryptography last week? Well, I decided to tackle the TryHackMe room on public key cryptography, and honestly, my brain feels like it just went through a blender. But in a good way!\nI\u0026rsquo;ve always heard terms like \u0026ldquo;RSA\u0026rdquo; and \u0026ldquo;digital signatures\u0026rdquo; thrown around, but they felt like these mysterious concepts that only math wizards could understand. Turns out, with the right analogies, this stuff actually makes sense.\nThe lightbulb moment with everyday security The room started with this coffee shop analogy that completely changed how I think about online security. When you\u0026rsquo;re meeting someone face-to-face, you automatically get:\nYou know it\u0026rsquo;s really them (you can see them) You know their words are authentic (coming from their mouth) You know the message isn\u0026rsquo;t changed (direct conversation) You can keep it private (talk quietly, sit away from others) But online? None of that happens naturally. Every message, login, file download - it all needs these same protections artificially built in through cryptography. That\u0026rsquo;s why we need this stuff!\nThe key exchange puzzle that kept me up Here\u0026rsquo;s what blew my mind: symmetric encryption is super fast, but how do you share the secret key without someone intercepting it? It\u0026rsquo;s like trying to mail someone a locked box along with the key - anyone could steal the key during delivery.\nThe analogy that finally made it click was thinking of it like this:\nI want to send you a secret code (symmetric key) You give me a lock that anyone can see/use (your public key) I put my secret code in a box, lock it with your lock, and send it Only you have the key to open it (your private key) Now we both know the secret code and can talk fast using symmetric encryption This is literally happening every time I visit an HTTPS website. My browser is doing this dance with the server to establish a secure connection. Mind blown.\nRSA: When math becomes magic I\u0026rsquo;ll be honest - when I first saw the RSA math, I almost closed the browser tab. Prime numbers, modular arithmetic, exponents\u0026hellip; it looked terrifying. But then I realized something: the basic idea is actually simple.\nThe security comes from a really hard math problem: it\u0026rsquo;s easy to multiply two big prime numbers together, but incredibly hard to work backwards and figure out what those two primes were just by looking at their product.\nI tried the example with small numbers:\nTake primes 157 and 199 Multiply them: 157 Ã— 199 = 31,243 Now try to figure out what 157 and 199 were just by looking at 31,243 Even with small numbers, it\u0026rsquo;s annoying. With 600+ digit numbers? Your computer would die before solving it.\nDiffie-Hellman: Creating secrets in public This one really messed with my head. Two people can somehow create the exact same secret key without ever directly sharing it, even if everyone is watching their conversation.\nThe math involves both people picking private numbers, doing some calculations with public values, sharing results, then doing more calculations that somehow give them both the same final secret. It\u0026rsquo;s like mathematical magic.\nI worked through the example several times because I couldn\u0026rsquo;t believe it actually works. The fact that Alice and Bob can both arrive at the same secret number without ever sending it to each other still feels like a trick.\nSSH keys: Finally understanding what I\u0026rsquo;ve been using I\u0026rsquo;ve been using SSH keys for months without really understanding what was happening under the hood. Now I get it:\nWhen I run ssh-keygen, I\u0026rsquo;m creating a key pair. The private key stays on my machine (and I should NEVER share it), while the public key goes on the server. When I connect, my SSH client proves I have the private key without actually sending it over the network.\nIt\u0026rsquo;s so much more secure than passwords, and now I understand why. Even if someone intercepts all the network traffic, they can\u0026rsquo;t get my private key from it.\nAlso learned that I should probably add passphrases to my SSH keys. Apparently tools like John the Ripper can crack unprotected private keys if someone gets access to them. Mental note to fix that.\nDigital signatures: Proving authenticity This concept took me a while to wrap my head around. A digital signature isn\u0026rsquo;t just slapping an image of your signature onto a document. It\u0026rsquo;s mathematical proof that:\nYou actually created/approved this document Nobody has modified it since you signed it The process involves hashing the document and encrypting that hash with your private key. Anyone can verify it by decrypting with your public key and comparing hashes. If they match, they know it\u0026rsquo;s legit and unchanged.\nI keep thinking about how this applies to software downloads, email verification, and even cryptocurrency transactions. It\u0026rsquo;s everywhere once you know what to look for.\nPGP/GPG: Email encryption that actually works I\u0026rsquo;d heard of PGP before but always thought it was too complicated for normal people. Going through the GPG key generation process wasn\u0026rsquo;t nearly as scary as I expected. The hardest part was choosing between all the different key types and settings.\nThe workflow makes sense now:\nGenerate a key pair Share your public key with people who want to send you encrypted emails Keep your private key safe and use it to decrypt messages I\u0026rsquo;m actually considering setting this up for real. Might be overkill for most of my emails, but it would be cool to have truly private communication when needed.\nThe bigger picture What really hit me is how all these concepts work together. HTTPS uses asymmetric encryption for key exchange, then symmetric encryption for speed. SSH uses key pairs for authentication. Digital signatures verify software integrity. PGP handles end-to-end email encryption.\nIt\u0026rsquo;s like discovering that all these things I use daily are actually part of one big interconnected security system. And the math, while intimidating at first, is based on some really elegant ideas.\nWhat\u0026rsquo;s next Tomorrow I\u0026rsquo;m diving into hashing - another fundamental crypto concept that I keep seeing everywhere but don\u0026rsquo;t fully understand yet. From what I\u0026rsquo;ve gathered, it\u0026rsquo;s like creating digital fingerprints for data, and it\u0026rsquo;s crucial for things like password storage and file integrity checking.\nI\u0026rsquo;m particularly curious about:\nHow hashing differs from encryption (apparently it\u0026rsquo;s one-way only?) Why even tiny changes in input create completely different hash outputs How password cracking tools like Hashcat actually work What makes some hashing algorithms secure while others are considered broken Should be interesting to see how this connects with everything I\u0026rsquo;ve learned about encryption so far. The more I dig into cryptography, the more I realize how all these pieces fit together to create the security foundation we rely on every day.\nTime to tackle the next room!\n","permalink":"https://progresslog.me/posts/2025-08-20-progresslog/","summary":"\u003cp\u003eOkay, so remember how I mentioned diving into cryptography last week? Well, I decided to tackle the TryHackMe room on public key cryptography, and honestly, my brain feels like it just went through a blender. But in a good way!\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve always heard terms like \u0026ldquo;RSA\u0026rdquo; and \u0026ldquo;digital signatures\u0026rdquo; thrown around, but they felt like these mysterious concepts that only math wizards could understand. Turns out, with the right analogies, this stuff actually makes sense.\u003c/p\u003e","title":"Public Key Cryptography Finally Clicked"},{"content":"So I\u0026rsquo;ve been diving deeper into cybersecurity lately, and one thing that kept coming up everywhere was cryptography. Honestly, I used to think crypto was just for hackers in movies or something super advanced that I\u0026rsquo;d tackle \u0026ldquo;someday.\u0026rdquo; But turns out, this stuff is literally everywhere I look.\nStarted a TryHackMe room on crypto basics last week, and it got me thinking - how did we even get to the point where my WhatsApp messages are secure, but the internet itself isn\u0026rsquo;t? That\u0026rsquo;s a weird contradiction, right?\nThe \u0026ldquo;aha\u0026rdquo; moment Here\u0026rsquo;s what blew my mind: every single time I log into my bank account, check my emails, or even just browse HTTPS sites, there\u0026rsquo;s this invisible layer of math protecting me. Without it, anyone with a packet sniffer could basically read everything I\u0026rsquo;m doing online. That\u0026rsquo;s terrifying when you think about it.\nI mean, imagine if every text message you sent was like shouting across a crowded room - anyone could listen in. That\u0026rsquo;s essentially what the internet would be like without encryption.\nWait, I use this stuff daily? This was my biggest realization this week. I\u0026rsquo;m not just learning about some abstract concept - I\u0026rsquo;m actually using cryptography constantly:\nWhen I SSH into my home server, there\u0026rsquo;s a whole handshake happening that I never paid attention to. My browser is constantly checking certificates when I visit websites. Even downloading files from GitHub involves hash verification (which I learned is also crypto!).\nThe crazy part? I\u0026rsquo;ve been taking all of this for granted. It just\u0026hellip; works. But now I\u0026rsquo;m starting to understand the massive engineering effort behind making it \u0026ldquo;just work.\u0026rdquo;\nGoing back to the beginning I decided to start from the very basics because, honestly, jumping straight into RSA and AES felt overwhelming. So I went way back - like, ancient Rome back.\nThe Caesar cipher is probably the simplest example I could wrap my head around. You just shift letters by a fixed number. So \u0026ldquo;HELLO\u0026rdquo; with a shift of 3 becomes \u0026ldquo;KHOOR\u0026rdquo;. Obviously, this is laughably easy to break (there are only 25 possible shifts), but it helped me understand the basic idea: transform readable text into unreadable text using a secret (the shift number).\nThen I found out about the VigenÃ¨re cipher, which uses a keyword instead of a single shift. It\u0026rsquo;s like Caesar cipher on steroids. Still breakable, but it took centuries for people to figure out how.\nReading about how the Allies broke the Enigma machine during WWII was genuinely fascinating. These weren\u0026rsquo;t just mathematical puzzles - breaking enemy encryption literally changed the course of history.\nModern stuff is intimidating but fascinating Now we\u0026rsquo;re dealing with algorithms like AES (Advanced Encryption Standard) that would take longer than the age of the universe to brute force. That\u0026rsquo;s\u0026hellip; hard to even comprehend.\nThere are basically two main approaches I\u0026rsquo;m learning about:\nSymmetric encryption is like having one key that both locks and unlocks the door. Super fast, but you need to somehow give that key to the other person securely. It\u0026rsquo;s like trying to send someone a locked box along with the key - how do you keep the key safe during delivery?\nAsymmetric encryption is this brilliant solution where you have two keys - one public, one private. You can literally post your public key on a billboard, and people can use it to send you encrypted messages that only your private key can decode. The math behind this still feels like magic to me.\nMost real systems apparently use both together, which makes sense when you think about it.\nThe math is\u0026hellip; actually approachable? I was dreading the mathematical side, but some of the basic operations are surprisingly simple. XOR (exclusive or) keeps showing up everywhere. It\u0026rsquo;s just comparing two bits - if they\u0026rsquo;re different, you get 1; if they\u0026rsquo;re the same, you get 0. What\u0026rsquo;s cool is that XORing something twice brings you back to the original: (A âŠ• B) âŠ• B = A.\nI played around with this concept for a while, and it\u0026rsquo;s actually the foundation of a lot of encryption schemes. Sometimes the simplest ideas are the most powerful.\nModulo arithmetic is another one that initially seemed intimidating but is actually just about remainders. 23 % 6 = 5 because 23 Ã· 6 = 3 remainder 5. This concept is used everywhere in crypto for wrapping numbers around.\nWhere I\u0026rsquo;m headed next Tomorrow I\u0026rsquo;m planning to tackle public key cryptography - specifically how asymmetric encryption actually works in practice. I keep hearing about RSA, digital signatures, and key exchange protocols, but I want to understand the mechanics behind them.\nI\u0026rsquo;m particularly curious about:\nHow does the whole \u0026ldquo;two keys\u0026rdquo; thing actually work mathematically? What\u0026rsquo;s this Diffie-Hellman key exchange I keep seeing mentioned? How do SSH keys fit into all of this? What are digital signatures and how do they prove authenticity? I have a feeling this is going to be another one of those topics that seems impossible at first but makes perfect sense once the right analogy clicks. The more I learn about cryptography, the more I realize how all these pieces fit together to create the security foundation we rely on every day.\nIt\u0026rsquo;s wild to think that cryptography went from emperors sending secret military messages to being the foundation of our entire digital economy. And I\u0026rsquo;m just getting started understanding it all.\nAnyway, that\u0026rsquo;s my brain dump for today. Back to the labs!\n","permalink":"https://progresslog.me/posts/2025-08-19-progresslog/","summary":"\u003cp\u003eSo I\u0026rsquo;ve been diving deeper into cybersecurity lately, and one thing that kept coming up everywhere was cryptography. Honestly, I used to think crypto was just for hackers in movies or something super advanced that I\u0026rsquo;d tackle \u0026ldquo;someday.\u0026rdquo; But turns out, this stuff is literally everywhere I look.\u003c/p\u003e\n\u003cp\u003eStarted a TryHackMe room on crypto basics last week, and it got me thinking - how did we even get to the point where my WhatsApp messages are secure, but the internet itself isn\u0026rsquo;t? That\u0026rsquo;s a weird contradiction, right?\u003c/p\u003e","title":"Diving into Cryptography - My First Steps"},{"content":"Hi, Iâ€™m Damodar.\nIâ€™m currently building my career in cybersecurity, with a strong focus on becoming a SOC Analyst. My journey started with curiosity about how systems, networks, and threats actually work behind the scenes. Since then, Iâ€™ve been learning step by step â€” from networking fundamentals and Linux internals to hands-on labs on platforms like TryHackMe.\nI use this blog to document what Iâ€™m learning, explain concepts in simple language, and keep track of my progress. Writing here helps me sharpen my understanding and also share knowledge with others starting out in security.\nOutside of cybersecurity, Iâ€™m just someone who enjoys exploring new tech, experimenting with Linux, and staying curious.\nConnect with Me GitHub: github.com/DamodarPatil LinkedIn: linkedin.com/in/damodarpatil Twitter (X): x.com/damodar_83 ","permalink":"https://progresslog.me/about/","summary":"\u003cp\u003eHi, Iâ€™m Damodar.\u003c/p\u003e\n\u003cp\u003eIâ€™m currently building my career in \u003cstrong\u003ecybersecurity\u003c/strong\u003e, with a strong focus on becoming a \u003cstrong\u003eSOC Analyst\u003c/strong\u003e. My journey started with curiosity about how systems, networks, and threats actually work behind the scenes. Since then, Iâ€™ve been learning step by step â€” from networking fundamentals and Linux internals to hands-on labs on platforms like TryHackMe.\u003c/p\u003e\n\u003cp\u003eI use this blog to document what Iâ€™m learning, explain concepts in simple language, and keep track of my progress. Writing here helps me sharpen my understanding and also share knowledge with others starting out in security.\u003c/p\u003e","title":"About Me"}]