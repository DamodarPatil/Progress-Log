[{"content":"\nWell, I promised yesterday I\u0026rsquo;d dive into John the Ripper, and holy cow, this tool is both fascinating and terrifying. After spending the last few days learning about hashing theory, getting hands-on with an actual password cracking tool really drove home how vulnerable weak passwords actually are.\nI went through the TryHackMe room on John the Ripper today, and it was like getting a masterclass in offensive security. The scary part? This stuff actually works, and it works fast.\nStarting with the basics (and feeling overwhelmed) The room started by explaining what John actually does, and it\u0026rsquo;s beautifully simple in concept: since you can\u0026rsquo;t reverse a hash, John just hashes a ton of password guesses and compares them to your target hash. When they match - boom, password cracked.\nThe basic syntax looked straightforward enough:\n1 john --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt But man, there are so many options and modes. I felt like I was looking at a Swiss Army knife with 50 different tools.\nHash identification became my new puzzle One thing that caught me off guard was how picky John can be about hash formats. The room showed me hash-identifier, this Python tool that tries to guess what type of hash you\u0026rsquo;re dealing with.\nMy first real test came when I had to crack this mysterious hash: c5a60cc6bbba781c601c5402755ae1044bbf45b78d1183cbf2ca1c865b6c792cf3c6b87791344986c8a832a0f9ca8d0b4afd3d9421a149d57075e1b4e93f90bf\nLooking at that massive string, I had absolutely no idea what type of hash it was. That\u0026rsquo;s where the hash-id.py tool became my lifesaver.\nI fed it the hash and it told me it was likely SHA-512 or Whirlpool. Not exactly confidence-inspiring when it gives you multiple options, but at least it narrowed it down. The tool would give me a list like \u0026ldquo;probably this, maybe that, could be this other thing\u0026rdquo; - definitely not the definitive answer I was hoping for.\nI decided to try Whirlpool first, and that\u0026rsquo;s when the magic happened:\nAnd boom! John cracked it in what felt like seconds. The password was \u0026ldquo;colossal\u0026rdquo; - which honestly made me chuckle. All that cryptographic complexity defeated by a single dictionary word from the rockyou.txt file.\nThe moment when theory met reality Remember that rockyou.txt file I mentioned from the 2009 breach? Well, it turns out that file is John\u0026rsquo;s bread and butter. 14+ million real passwords that people actually used. Watching John churn through thousands of attempts per second was both mesmerizing and horrifying.\nThat first successful crack really hit me - if your password is in that wordlist, you\u0026rsquo;re toast. The speed was what shocked me most. All those theoretical discussions about hash security, and here I was watching it get defeated in seconds.\nWindows and Linux password adventures The room walked through cracking actual system passwords, and this is where things got really interesting. Learning about NTLM hashes from Windows SAM databases felt like peeking behind the curtain of how Windows actually works.\nThe Windows NTLM hash was a completely different beast from what I\u0026rsquo;d been working with. Using john --format=nt --wordlist=/usr/share/wordlists/rockyou.txt, I watched it work through the rockyou wordlist. When it cracked, the password turned out to be \u0026ldquo;mushroom\u0026rdquo; - another simple dictionary word that probably took John milliseconds to find.\nWhat struck me was how fast these \u0026ldquo;secure\u0026rdquo; password hashes fell to a basic dictionary attack. Different operating system, different hashing algorithm, same result.\nThe Linux side with /etc/shadow was even more fascinating. That unshadow tool that combines /etc/passwd and /etc/shadow files? Genius. I never realized why both files exist, but now it makes sense - separation of public info (usernames, home directories) from sensitive stuff (password hashes).\nThis was the most realistic scenario - cracking an actual Linux system password. After running unshadow, I had a properly formatted file that John could work with. The $6$ prefix told me this was SHA512crypt - one of the stronger hashing algorithms used by modern Linux systems.\nI thought this one might take longer to crack since it\u0026rsquo;s considered very secure, but I was completely wrong. The root password? \u0026ldquo;123456\u0026rdquo;. I actually laughed out loud when I saw that. Here\u0026rsquo;s a system using strong cryptographic hashing (SHA512crypt), but the user chose literally one of the most common passwords ever.\nSingle crack mode blew my mind This is where John gets really clever. Instead of just trying dictionary words, it can use the username to generate password guesses. So for a user named \u0026ldquo;markus\u0026rdquo;, it might try \u0026ldquo;markus1\u0026rdquo;, \u0026ldquo;Markus123\u0026rdquo;, \u0026ldquo;markus!\u0026rdquo;, etc.\nThe concept of word mangling is brilliant and terrifying. John takes whatever information it has about the target (username, full name from GECOS field) and systematically modifies it following common password patterns.\nI tested this on a hash where the password was literally the username with \u0026ldquo;123!\u0026rdquo; appended, and John cracked it in single mode faster than wordlist mode. That\u0026rsquo;s the scary part - people really do create predictable passwords based on their usernames.\nCustom rules: When you know too much about human psychology The custom rules section made me realize how predictable we are as humans. The room showed how to create rules that match common password complexity requirements - capital letter at the start, number and symbol at the end.\nThe syntax looked like regex had a baby with some other markup language:\n1 2 [List.Rules:PoloPassword] cAz\u0026#34;[0-9][!Â£$%@]\u0026#34; That rule basically says \u0026ldquo;capitalize first letter, then append a number 0-9, then append one of those symbols.\u0026rdquo; And honestly? That probably covers like 60% of \u0026ldquo;complex\u0026rdquo; passwords that meet corporate requirements.\nI tried creating my own rule based on password patterns I\u0026rsquo;ve seen at previous jobs, and it was depressingly effective when I tested it on sample hashes.\nBeyond text passwords: Files, archives, and keys The second half of the room opened up a whole new world. John can crack ZIP file passwords? RAR archives? SSH private key passphrases? Mind blown.\nThe zip2john and rar2john tools convert these protected files into formats John can work with. I downloaded a password-protected ZIP file and walked through the process:\nzip2john protected.zip \u0026gt; zip_hash.txt john --wordlist=rockyou.txt zip_hash.txt Watch John work its magic Seeing it actually recover the ZIP password was surreal. All those times I\u0026rsquo;ve forgotten archive passwords - turns out there was a solution all along.\nThe SSH key cracking with ssh2john was particularly interesting since I use SSH keys daily. It\u0026rsquo;s a good reminder to always use strong passphrases on private keys, even if they never leave your machine.\nWhat these practical exercises taught me Seeing these hashes get cracked so easily was genuinely eye-opening:\nHash strength doesn\u0026rsquo;t matter if the password is weak - SHA512crypt is considered very secure, but \u0026ldquo;123456\u0026rdquo; is still \u0026ldquo;123456\u0026rdquo; no matter how you hash it.\nThe rockyou.txt wordlist is terrifyingly effective - Every single password I cracked was in that list of real passwords from the 2009 breach. It\u0026rsquo;s a sobering reminder of how predictable humans are.\nSpeed matters - Even in my slow VM, John was trying thousands of passwords per second. On dedicated hardware with GPU acceleration, this would be orders of magnitude faster.\nDifferent hash types, same result - Whether it was Whirlpool, NTLM, or SHA512crypt, weak passwords fell just as fast.\nThe ethical weight of this knowledge Throughout the entire room, I kept thinking about the ethical implications. These tools are incredibly powerful, and in the wrong hands, they could do real damage. But understanding how they work is crucial for defense.\nEvery time John cracked a hash in seconds, it reinforced why proper password policies matter. It\u0026rsquo;s not just theoretical anymore - I\u0026rsquo;ve seen firsthand how fast weak passwords fall.\nThe most important lesson? Technical security controls are only as strong as the human choices behind them. You can have the most sophisticated hashing algorithm in the world, but if users choose \u0026ldquo;password123\u0026rdquo;, you might as well be storing passwords in plain text.\nPerformance observations and limitations Running everything in my VM was\u0026hellip; slow. John kept mentioning GPU acceleration and how much faster it could be, but VMs don\u0026rsquo;t play well with GPU passthrough. I\u0026rsquo;m definitely adding \u0026ldquo;run John on bare metal\u0026rdquo; to my learning todo list.\nEven on my limited setup, watching John try thousands of password combinations per second was impressive. I can only imagine what it\u0026rsquo;s like on a proper cracking rig with multiple high-end GPUs.\nWhat really stuck with me This wasn\u0026rsquo;t just about learning a tool - it was about understanding human behavior and how it relates to security. The single crack mode exploiting username patterns, the custom rules matching password complexity requirements, even the ZIP file cracking - it\u0026rsquo;s all based on predictable human choices.\nThe most valuable lesson? Security isn\u0026rsquo;t just about strong algorithms and good implementation. It\u0026rsquo;s about understanding that humans are often the weakest link, and tools like John are really good at exploiting human predictability.\nPractical takeaways for my future I\u0026rsquo;m definitely going to:\nTest any password policies I create against John\u0026rsquo;s rule sets Always use truly random passwords instead of following predictable patterns Understand that \u0026ldquo;complexity requirements\u0026rdquo; alone don\u0026rsquo;t create strong passwords Remember that any password-protected file might be crackable given enough time This hands-on experience really reinforced why password policies and user education are so critical in cybersecurity. It\u0026rsquo;s not enough to implement strong technical controls - you need to help users make better choices too.\n","permalink":"https://progresslog.me/posts/2025-08-22-progresslog/","summary":"\u003cp\u003e\u003cimg alt=\"John the Ripper\" loading=\"lazy\" src=\"/images/John-The-ripper.jpeg\"\u003e\u003c/p\u003e\n\u003cp\u003eWell, I promised yesterday I\u0026rsquo;d dive into John the Ripper, and holy cow, this tool is both fascinating and terrifying. After spending the last few days learning about hashing theory, getting hands-on with an actual password cracking tool really drove home how vulnerable weak passwords actually are.\u003c/p\u003e\n\u003cp\u003eI went through the TryHackMe room on John the Ripper today, and it was like getting a masterclass in offensive security. The scary part? This stuff actually works, and it works fast.\u003c/p\u003e","title":"John the Ripper: My First Real Password Cracking Experience"},{"content":"So after wrapping up public key cryptography yesterday, I jumped straight into hashing today. I thought I had a decent understanding of what hashing was, but wow, was I wrong. This stuff is way more fundamental to cybersecurity than I realized.\nThe TryHackMe room started with a simple question that made me pause: \u0026ldquo;You just downloaded a 6GB file - how do you know it\u0026rsquo;s exactly the same as the original?\u0026rdquo; My first thought was \u0026ldquo;uh, check the file size?\u0026rdquo; But that\u0026rsquo;s obviously not enough. Enter hash values - basically digital fingerprints for data.\nThe lightbulb moment with file integrity Here\u0026rsquo;s what clicked for me: a hash function takes ANY size input (could be a single letter, could be a 6GB file) and spits out a fixed-length string. And here\u0026rsquo;s the crazy part - if even ONE bit changes in that massive file, the entire hash changes completely.\nI tested this myself with two simple text files:\nOne containing just the letter \u0026ldquo;T\u0026rdquo; Another containing just the letter \u0026ldquo;U\u0026rdquo; The difference? Literally one bit in binary. But their MD5, SHA1, and SHA256 hashes were completely different. That\u0026rsquo;s the avalanche effect in action, and it\u0026rsquo;s honestly pretty mind-blowing.\nPassword storage finally makes sense This is where things got really interesting for me. I always wondered why websites say they \u0026ldquo;can\u0026rsquo;t tell you your password\u0026rdquo; when you forget it - they can only reset it. Now I get it!\nThey\u0026rsquo;re not actually storing your password at all. They\u0026rsquo;re storing the hash of your password. When you log in, they hash whatever you typed and compare it to the stored hash. If they match, you\u0026rsquo;re in. If not, you\u0026rsquo;re blocked.\nIt\u0026rsquo;s brilliant because even if someone steals their database, they don\u0026rsquo;t get actual passwords - just hash values that can\u0026rsquo;t be reversed.\nThe horror stories that made me paranoid The room covered some massive security breaches that honestly made my skin crawl:\nRockYou (2009) - They stored 14+ million passwords in plain text. Just sitting there, readable by anyone who got access to the database. The fact that this file (rockyou.txt) is now a standard wordlist in Kali Linux says everything about how badly they messed up.\nAdobe - Used outdated encryption AND stored password hints in plain text. Sometimes the hints basically gave away the password anyway.\nLinkedIn (2012) - Used SHA-1 (now considered weak) with no salting. This made the hashes vulnerable to rainbow table attacks.\nThese aren\u0026rsquo;t small companies making rookie mistakes - these are major tech companies that should know better. It really drove home how critical proper password storage is.\nSalting: The game-changer I didn\u0026rsquo;t know about Here\u0026rsquo;s something I never understood before: why do two people with the same password get different hash values in secure systems?\nThe answer is salting. Before hashing the password, the system adds a random string (the salt) to it. So even if two users have \u0026ldquo;password123\u0026rdquo; as their password, their hashes will be completely different because they each get a unique random salt.\nThis prevents rainbow table attacks, where attackers use precomputed lists of common passwords and their hashes. With salting, those precomputed tables become useless.\nHash cracking tools are terrifyingly effective I knew tools like Hashcat existed, but I didn\u0026rsquo;t realize how powerful they are. The fact that GPUs can try millions of password combinations per second is genuinely scary.\nWhat\u0026rsquo;s interesting is that some modern hashing algorithms like bcrypt are specifically designed to be slow, even on GPUs. It\u0026rsquo;s an arms race between security and attacking tools.\nI tried to run some basic Hashcat examples in my VM, but as expected, VMs don\u0026rsquo;t play well with GPU acceleration. Mental note: if I ever need to do serious hash cracking (for legitimate purposes!), I\u0026rsquo;ll need to run it on the host OS.\nBeyond passwords: integrity checking everywhere The more I learned about hashing, the more I realized it\u0026rsquo;s everywhere:\nEvery time I download a Linux ISO, there\u0026rsquo;s a SHA256 checksum to verify it Git uses hashes to track changes and ensure repository integrity Digital forensics relies heavily on hashing to prove evidence hasn\u0026rsquo;t been tampered with Even blockchain technology is built on hashing concepts I actually went and checked some of my recent downloads against their published checksums. It\u0026rsquo;s oddly satisfying when the hashes match perfectly.\nHMAC: Hashing with a secret sauce Near the end, the room covered HMAC (Hash-based Message Authentication Code), which combines hashing with a secret key. This provides both integrity checking AND authentication - you can verify not just that the message wasn\u0026rsquo;t changed, but also that it came from someone who knows the secret key.\nThe math behind HMAC involves XOR operations and double hashing, which initially looked intimidating. But breaking it down step by step, it\u0026rsquo;s actually quite elegant. It\u0026rsquo;s like putting a tamper-evident seal on a message that only certain people can create.\nThe big picture is becoming clearer What really struck me today is how hashing, symmetric encryption, and asymmetric encryption all work together:\nHashing verifies integrity and stores passwords securely Symmetric encryption provides fast, bulk data protection Asymmetric encryption handles key exchange and digital signatures Each piece solves specific problems, and together they create the foundation for secure digital communication. It\u0026rsquo;s like finally seeing how all the puzzle pieces fit together.\nSome practical takeaways This stuff isn\u0026rsquo;t just theoretical for me anymore. I\u0026rsquo;m already thinking about:\nSetting up proper password hashing in any future projects (bcrypt, scrypt, or Argon2) Always verifying checksums when downloading important files Understanding what\u0026rsquo;s happening when I see those SSH fingerprint warnings Appreciating why password managers are so much better than reusing passwords What\u0026rsquo;s next I\u0026rsquo;m planning to dive deeper into John the Ripper next - one of the most popular password cracking tools I keep hearing about. After learning all this theory about hash cracking and password security, I want to get hands-on experience with how these tools actually work.\nI\u0026rsquo;m particularly curious about:\nHow John the Ripper compares to Hashcat in terms of capabilities Setting up custom wordlists and rules for more effective cracking Understanding the different attack modes and when to use each one Maybe trying some CTF-style password cracking challenges Should be interesting to see the practical side of all this hashing theory. Plus, understanding how attackers actually crack passwords will help me better secure systems in the future.\nAnother solid day of learning in the books. Time to let this all sink in before tackling the next topic!\n","permalink":"https://progresslog.me/posts/2025-08-21-progresslog/","summary":"\u003cp\u003eSo after wrapping up public key cryptography yesterday, I jumped straight into hashing today. I thought I had a decent understanding of what hashing was, but wow, was I wrong. This stuff is way more fundamental to cybersecurity than I realized.\u003c/p\u003e\n\u003cp\u003eThe TryHackMe room started with a simple question that made me pause: \u0026ldquo;You just downloaded a 6GB file - how do you know it\u0026rsquo;s exactly the same as the original?\u0026rdquo; My first thought was \u0026ldquo;uh, check the file size?\u0026rdquo; But that\u0026rsquo;s obviously not enough. Enter hash values - basically digital fingerprints for data.\u003c/p\u003e","title":"Hashing: Digital Fingerprints and Password Security"},{"content":"Okay, so remember how I mentioned diving into cryptography yesterday? Well, I decided to tackle the TryHackMe room on public key cryptography, and honestly, my brain feels like it just went through a blender. But in a good way!\nI\u0026rsquo;ve always heard terms like \u0026ldquo;RSA\u0026rdquo; and \u0026ldquo;digital signatures\u0026rdquo; thrown around, but they felt like these mysterious concepts that only math wizards could understand. Turns out, with the right analogies, this stuff actually makes sense.\nThe lightbulb moment with everyday security The room started with this coffee shop analogy that completely changed how I think about online security. When you\u0026rsquo;re meeting someone face-to-face, you automatically get:\nYou know it\u0026rsquo;s really them (you can see them) You know their words are authentic (coming from their mouth) You know the message isn\u0026rsquo;t changed (direct conversation) You can keep it private (talk quietly, sit away from others) But online? None of that happens naturally. Every message, login, file download - it all needs these same protections artificially built in through cryptography. That\u0026rsquo;s why we need this stuff!\nThe key exchange puzzle that kept me up Here\u0026rsquo;s what blew my mind: symmetric encryption is super fast, but how do you share the secret key without someone intercepting it? It\u0026rsquo;s like trying to mail someone a locked box along with the key - anyone could steal the key during delivery.\nThe analogy that finally made it click was thinking of it like this:\nI want to send you a secret code (symmetric key) You give me a lock that anyone can see/use (your public key) I put my secret code in a box, lock it with your lock, and send it Only you have the key to open it (your private key) Now we both know the secret code and can talk fast using symmetric encryption This is literally happening every time I visit an HTTPS website. My browser is doing this dance with the server to establish a secure connection. Mind blown.\nRSA: When math becomes magic I\u0026rsquo;ll be honest - when I first saw the RSA math, I almost closed the browser tab. Prime numbers, modular arithmetic, exponents\u0026hellip; it looked terrifying. But then I realized something: the basic idea is actually simple.\nThe security comes from a really hard math problem: it\u0026rsquo;s easy to multiply two big prime numbers together, but incredibly hard to work backwards and figure out what those two primes were just by looking at their product.\nI tried the example with small numbers:\nTake primes 157 and 199 Multiply them: 157 Ã 199 = 31,243 Now try to figure out what 157 and 199 were just by looking at 31,243 Even with small numbers, it\u0026rsquo;s annoying. With 600+ digit numbers? Your computer would die before solving it.\nDiffie-Hellman: Creating secrets in public This one really messed with my head. Two people can somehow create the exact same secret key without ever directly sharing it, even if everyone is watching their conversation.\nThe math involves both people picking private numbers, doing some calculations with public values, sharing results, then doing more calculations that somehow give them both the same final secret. It\u0026rsquo;s like mathematical magic.\nI worked through the example several times because I couldn\u0026rsquo;t believe it actually works. The fact that Alice and Bob can both arrive at the same secret number without ever sending it to each other still feels like a trick.\nSSH keys: Finally understanding what I\u0026rsquo;ve been using I\u0026rsquo;ve been using SSH keys for months without really understanding what was happening under the hood. Now I get it:\nWhen I run ssh-keygen, I\u0026rsquo;m creating a key pair. The private key stays on my machine (and I should NEVER share it), while the public key goes on the server. When I connect, my SSH client proves I have the private key without actually sending it over the network.\nIt\u0026rsquo;s so much more secure than passwords, and now I understand why. Even if someone intercepts all the network traffic, they can\u0026rsquo;t get my private key from it.\nAlso learned that I should probably add passphrases to my SSH keys. Apparently tools like John the Ripper can crack unprotected private keys if someone gets access to them. Mental note to fix that.\nDigital signatures: Proving authenticity This concept took me a while to wrap my head around. A digital signature isn\u0026rsquo;t just slapping an image of your signature onto a document. It\u0026rsquo;s mathematical proof that:\nYou actually created/approved this document Nobody has modified it since you signed it The process involves hashing the document and encrypting that hash with your private key. Anyone can verify it by decrypting with your public key and comparing hashes. If they match, they know it\u0026rsquo;s legit and unchanged.\nI keep thinking about how this applies to software downloads, email verification, and even cryptocurrency transactions. It\u0026rsquo;s everywhere once you know what to look for.\nPGP/GPG: Email encryption that actually works I\u0026rsquo;d heard of PGP before but always thought it was too complicated for normal people. Going through the GPG key generation process wasn\u0026rsquo;t nearly as scary as I expected. The hardest part was choosing between all the different key types and settings.\nThe workflow makes sense now:\nGenerate a key pair Share your public key with people who want to send you encrypted emails Keep your private key safe and use it to decrypt messages I\u0026rsquo;m actually considering setting this up for real. Might be overkill for most of my emails, but it would be cool to have truly private communication when needed.\nThe bigger picture What really hit me is how all these concepts work together. HTTPS uses asymmetric encryption for key exchange, then symmetric encryption for speed. SSH uses key pairs for authentication. Digital signatures verify software integrity. PGP handles end-to-end email encryption.\nIt\u0026rsquo;s like discovering that all these things I use daily are actually part of one big interconnected security system. And the math, while intimidating at first, is based on some really elegant ideas.\nWhat\u0026rsquo;s next Tomorrow I\u0026rsquo;m diving into hashing - another fundamental crypto concept that I keep seeing everywhere but don\u0026rsquo;t fully understand yet. From what I\u0026rsquo;ve gathered, it\u0026rsquo;s like creating digital fingerprints for data, and it\u0026rsquo;s crucial for things like password storage and file integrity checking.\nI\u0026rsquo;m particularly curious about:\nHow hashing differs from encryption (apparently it\u0026rsquo;s one-way only?) Why even tiny changes in input create completely different hash outputs How password cracking tools like Hashcat actually work What makes some hashing algorithms secure while others are considered broken Should be interesting to see how this connects with everything I\u0026rsquo;ve learned about encryption so far. The more I dig into cryptography, the more I realize how all these pieces fit together to create the security foundation we rely on every day.\nTime to tackle the next room!\n","permalink":"https://progresslog.me/posts/2025-08-20-progresslog/","summary":"\u003cp\u003eOkay, so remember how I mentioned diving into cryptography yesterday? Well, I decided to tackle the TryHackMe room on public key cryptography, and honestly, my brain feels like it just went through a blender. But in a good way!\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve always heard terms like \u0026ldquo;RSA\u0026rdquo; and \u0026ldquo;digital signatures\u0026rdquo; thrown around, but they felt like these mysterious concepts that only math wizards could understand. Turns out, with the right analogies, this stuff actually makes sense.\u003c/p\u003e","title":"Public Key Cryptography Finally Clicked"},{"content":"So I\u0026rsquo;ve been diving deeper into cybersecurity lately, and one thing that kept coming up everywhere was cryptography. Honestly, I used to think crypto was just for hackers in movies or something super advanced that I\u0026rsquo;d tackle \u0026ldquo;someday.\u0026rdquo; But turns out, this stuff is literally everywhere I look.\nStarted a TryHackMe room on crypto basics last week, and it got me thinking - how did we even get to the point where my WhatsApp messages are secure, but the internet itself isn\u0026rsquo;t? That\u0026rsquo;s a weird contradiction, right?\nThe \u0026ldquo;aha\u0026rdquo; moment Here\u0026rsquo;s what blew my mind: every single time I log into my bank account, check my emails, or even just browse HTTPS sites, there\u0026rsquo;s this invisible layer of math protecting me. Without it, anyone with a packet sniffer could basically read everything I\u0026rsquo;m doing online. That\u0026rsquo;s terrifying when you think about it.\nI mean, imagine if every text message you sent was like shouting across a crowded room - anyone could listen in. That\u0026rsquo;s essentially what the internet would be like without encryption.\nWait, I use this stuff daily? This was my biggest realization this week. I\u0026rsquo;m not just learning about some abstract concept - I\u0026rsquo;m actually using cryptography constantly:\nWhen I SSH into my home server, there\u0026rsquo;s a whole handshake happening that I never paid attention to. My browser is constantly checking certificates when I visit websites. Even downloading files from GitHub involves hash verification (which I learned is also crypto!).\nThe crazy part? I\u0026rsquo;ve been taking all of this for granted. It just\u0026hellip; works. But now I\u0026rsquo;m starting to understand the massive engineering effort behind making it \u0026ldquo;just work.\u0026rdquo;\nGoing back to the beginning I decided to start from the very basics because, honestly, jumping straight into RSA and AES felt overwhelming. So I went way back - like, ancient Rome back.\nThe Caesar cipher is probably the simplest example I could wrap my head around. You just shift letters by a fixed number. So \u0026ldquo;HELLO\u0026rdquo; with a shift of 3 becomes \u0026ldquo;KHOOR\u0026rdquo;. Obviously, this is laughably easy to break (there are only 25 possible shifts), but it helped me understand the basic idea: transform readable text into unreadable text using a secret (the shift number).\nThen I found out about the VigenÃ¨re cipher, which uses a keyword instead of a single shift. It\u0026rsquo;s like Caesar cipher on steroids. Still breakable, but it took centuries for people to figure out how.\nReading about how the Allies broke the Enigma machine during WWII was genuinely fascinating. These weren\u0026rsquo;t just mathematical puzzles - breaking enemy encryption literally changed the course of history.\nModern stuff is intimidating but fascinating Now we\u0026rsquo;re dealing with algorithms like AES (Advanced Encryption Standard) that would take longer than the age of the universe to brute force. That\u0026rsquo;s\u0026hellip; hard to even comprehend.\nThere are basically two main approaches I\u0026rsquo;m learning about:\nSymmetric encryption is like having one key that both locks and unlocks the door. Super fast, but you need to somehow give that key to the other person securely. It\u0026rsquo;s like trying to send someone a locked box along with the key - how do you keep the key safe during delivery?\nAsymmetric encryption is this brilliant solution where you have two keys - one public, one private. You can literally post your public key on a billboard, and people can use it to send you encrypted messages that only your private key can decode. The math behind this still feels like magic to me.\nMost real systems apparently use both together, which makes sense when you think about it.\nThe math is\u0026hellip; actually approachable? I was dreading the mathematical side, but some of the basic operations are surprisingly simple. XOR (exclusive or) keeps showing up everywhere. It\u0026rsquo;s just comparing two bits - if they\u0026rsquo;re different, you get 1; if they\u0026rsquo;re the same, you get 0. What\u0026rsquo;s cool is that XORing something twice brings you back to the original: (A â B) â B = A.\nI played around with this concept for a while, and it\u0026rsquo;s actually the foundation of a lot of encryption schemes. Sometimes the simplest ideas are the most powerful.\nModulo arithmetic is another one that initially seemed intimidating but is actually just about remainders. 23 % 6 = 5 because 23 Ã· 6 = 3 remainder 5. This concept is used everywhere in crypto for wrapping numbers around.\nWhere I\u0026rsquo;m headed next Tomorrow I\u0026rsquo;m planning to tackle public key cryptography - specifically how asymmetric encryption actually works in practice. I keep hearing about RSA, digital signatures, and key exchange protocols, but I want to understand the mechanics behind them.\nI\u0026rsquo;m particularly curious about:\nHow does the whole \u0026ldquo;two keys\u0026rdquo; thing actually work mathematically? What\u0026rsquo;s this Diffie-Hellman key exchange I keep seeing mentioned? How do SSH keys fit into all of this? What are digital signatures and how do they prove authenticity? I have a feeling this is going to be another one of those topics that seems impossible at first but makes perfect sense once the right analogy clicks. The more I learn about cryptography, the more I realize how all these pieces fit together to create the security foundation we rely on every day.\nIt\u0026rsquo;s wild to think that cryptography went from emperors sending secret military messages to being the foundation of our entire digital economy. And I\u0026rsquo;m just getting started understanding it all.\nAnyway, that\u0026rsquo;s my brain dump for today. Back to the labs!\n","permalink":"https://progresslog.me/posts/2025-08-19-progresslog/","summary":"\u003cp\u003eSo I\u0026rsquo;ve been diving deeper into cybersecurity lately, and one thing that kept coming up everywhere was cryptography. Honestly, I used to think crypto was just for hackers in movies or something super advanced that I\u0026rsquo;d tackle \u0026ldquo;someday.\u0026rdquo; But turns out, this stuff is literally everywhere I look.\u003c/p\u003e\n\u003cp\u003eStarted a TryHackMe room on crypto basics last week, and it got me thinking - how did we even get to the point where my WhatsApp messages are secure, but the internet itself isn\u0026rsquo;t? That\u0026rsquo;s a weird contradiction, right?\u003c/p\u003e","title":"Diving into Cryptography - My First Steps"},{"content":"Hi, Iâm Damodar.\nIâm currently building my career in cybersecurity, with a strong focus on becoming a SOC Analyst. My journey started with curiosity about how systems, networks, and threats actually work behind the scenes. Since then, Iâve been learning step by step â from networking fundamentals and Linux internals to hands-on labs on platforms like TryHackMe.\nI use this blog to document what Iâm learning, explain concepts in simple language, and keep track of my progress. Writing here helps me sharpen my understanding and also share knowledge with others starting out in security.\nOutside of cybersecurity, Iâm just someone who enjoys exploring new tech, experimenting with Linux, and staying curious.\nConnect with Me GitHub: github.com/DamodarPatil LinkedIn: linkedin.com/in/damodarpatil Twitter (X): x.com/damodar_83 ","permalink":"https://progresslog.me/about/","summary":"\u003cp\u003eHi, Iâm Damodar.\u003c/p\u003e\n\u003cp\u003eIâm currently building my career in \u003cstrong\u003ecybersecurity\u003c/strong\u003e, with a strong focus on becoming a \u003cstrong\u003eSOC Analyst\u003c/strong\u003e. My journey started with curiosity about how systems, networks, and threats actually work behind the scenes. Since then, Iâve been learning step by step â from networking fundamentals and Linux internals to hands-on labs on platforms like TryHackMe.\u003c/p\u003e\n\u003cp\u003eI use this blog to document what Iâm learning, explain concepts in simple language, and keep track of my progress. Writing here helps me sharpen my understanding and also share knowledge with others starting out in security.\u003c/p\u003e","title":"About Me"}]